package org.davidCMs.vkengine.vk.deviceinfo;

import org.lwjgl.system.MemoryStack;
import org.lwjgl.vulkan.VK14;
import org.lwjgl.vulkan.VkPhysicalDevice;
import org.lwjgl.vulkan.VkPhysicalDeviceFeatures;

public record VkEPhysicalDeviceFeatures(
		boolean robustBufferAccess,
		boolean fullDrawIndexUint32,
		boolean imageCubeArray,
		boolean independentBlend,
		boolean geometryShader,
		boolean tessellationShader,
		boolean sampleRateShading,
		boolean dualSrcBlend,
		boolean logicOp,
		boolean multiDrawIndirect,
		boolean drawIndirectFirstInstance,
		boolean depthClamp,
		boolean depthBiasClamp,
		boolean fillModeNonSolid,
		boolean depthBounds,
		boolean wideLines,
		boolean largePoints,
		boolean alphaToOne,
		boolean multiViewport,
		boolean samplerAnisotropy,
		boolean textureCompressionEtc2,
		boolean textureCompressionAstcLdr,
		boolean textureCompressionBc,
		boolean occlusionQueryPrecise,
		boolean pipelineStatisticsQuery,
		boolean vertexPipelineStoresAndAtomics,
		boolean fragmentStoresAndAtomics,
		boolean shaderTessellationAndGeometryPointSize,
		boolean shaderImageGatherExtended,
		boolean shaderStorageImageExtendedFormats,
		boolean shaderStorageImageMultisample,
		boolean shaderStorageImageReadWithoutFormat,
		boolean shaderStorageImageWriteWithoutFormat,
		boolean shaderUniformBufferArrayDynamicIndexing,
		boolean shaderSampledImageArrayDynamicIndexing,
		boolean shaderStorageBufferArrayDynamicIndexing,
		boolean shaderStorageImageArrayDynamicIndexing,
		boolean shaderClipDistance,
		boolean shaderCullDistance,
		boolean shaderFloat64,
		boolean shaderInt64,
		boolean shaderInt16,
		boolean shaderResourceResidency,
		boolean shaderResourceMinLod,
		boolean sparseBinding,
		boolean sparseResidencyBuffer,
		boolean sparseResidencyImage2d,
		boolean sparseResidencyImage3d,
		boolean sparseResidency2Samples,
		boolean sparseResidency4Samples,
		boolean sparseResidency8Samples,
		boolean sparseResidency16Samples,
		boolean sparseResidencyAliased,
		boolean variableMultisampleRate,
		boolean inheritedQueries

) {
	public static VkEPhysicalDeviceFeatures getFrom(VkPhysicalDevice device) {
		try (MemoryStack stack = MemoryStack.stackPush()) {
			VkPhysicalDeviceFeatures features = VkPhysicalDeviceFeatures.calloc(stack);
			VK14.vkGetPhysicalDeviceFeatures(device, features);
			return populate(features);
		}
	}

	private static VkEPhysicalDeviceFeatures populate(VkPhysicalDeviceFeatures features) {
		return new VkEPhysicalDeviceFeatures(
				features.robustBufferAccess(),
				features.fullDrawIndexUint32(),
				features.imageCubeArray(),
				features.independentBlend(),
				features.geometryShader(),
				features.tessellationShader(),
				features.sampleRateShading(),
				features.dualSrcBlend(),
				features.logicOp(),
				features.multiDrawIndirect(),
				features.drawIndirectFirstInstance(),
				features.depthClamp(),
				features.depthBiasClamp(),
				features.fillModeNonSolid(),
				features.depthBounds(),
				features.wideLines(),
				features.largePoints(),
				features.alphaToOne(),
				features.multiViewport(),
				features.samplerAnisotropy(),
				features.textureCompressionETC2(),
				features.textureCompressionASTC_LDR(),
				features.textureCompressionBC(),
				features.occlusionQueryPrecise(),
				features.pipelineStatisticsQuery(),
				features.vertexPipelineStoresAndAtomics(),
				features.fragmentStoresAndAtomics(),
				features.shaderTessellationAndGeometryPointSize(),
				features.shaderImageGatherExtended(),
				features.shaderStorageImageExtendedFormats(),
				features.shaderStorageImageMultisample(),
				features.shaderStorageImageReadWithoutFormat(),
				features.shaderStorageImageWriteWithoutFormat(),
				features.shaderUniformBufferArrayDynamicIndexing(),
				features.shaderSampledImageArrayDynamicIndexing(),
				features.shaderStorageBufferArrayDynamicIndexing(),
				features.shaderStorageImageArrayDynamicIndexing(),
				features.shaderClipDistance(),
				features.shaderCullDistance(),
				features.shaderFloat64(),
				features.shaderInt64(),
				features.shaderInt16(),
				features.shaderResourceResidency(),
				features.shaderResourceMinLod(),
				features.sparseBinding(),
				features.sparseResidencyBuffer(),
				features.sparseResidencyImage2D(),
				features.sparseResidencyImage3D(),
				features.sparseResidency2Samples(),
				features.sparseResidency4Samples(),
				features.sparseResidency8Samples(),
				features.sparseResidency16Samples(),
				features.sparseResidencyAliased(),
				features.variableMultisampleRate(),
				features.inheritedQueries()
		);
	}
}
